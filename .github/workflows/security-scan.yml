name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for security scanning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r security/requirements.txt
        pip install -r requirements.txt
    
    - name: Run Gitleaks (Secret Detection)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Run Semgrep (Static Analysis)
      run: |
        semgrep --config=auto --json --output=semgrep-results.json .
        semgrep --config=p/security --json --output=semgrep-security-results.json .
    
    - name: Run Trivy (Vulnerability Scanner)
      run: |
        trivy fs --format json --output trivy-results.json .
        trivy fs --format table --output trivy-report.txt .
    
    - name: Run Dependabot Security Check
      run: |
        python -m pip install safety
        safety check --json --output safety-results.json
    
    - name: Run Bandit (Python Security Linter)
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json
    
    - name: Run Custom Security Scanner
      run: |
        python security/runtime_security.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
    
    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          semgrep-results.json
          semgrep-security-results.json
          trivy-results.json
          trivy-report.txt
          safety-results.json
          bandit-results.json
    
    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read security results
          let securitySummary = '## ðŸ”’ Security Scan Results\n\n';
          
          try {
            // Parse Semgrep results
            const semgrepResults = JSON.parse(fs.readFileSync('semgrep-results.json', 'utf8'));
            const semgrepCount = semgrepResults.results ? semgrepResults.results.length : 0;
            securitySummary += `- **Semgrep**: ${semgrepCount} issues found\n`;
          } catch (e) {
            securitySummary += '- **Semgrep**: Failed to parse results\n';
          }
          
          try {
            // Parse Trivy results
            const trivyResults = JSON.parse(fs.readFileSync('trivy-results.json', 'utf8'));
            let trivyCount = 0;
            if (trivyResults.Results) {
              trivyResults.Results.forEach(result => {
                if (result.Vulnerabilities) {
                  trivyCount += result.Vulnerabilities.length;
                }
              });
            }
            securitySummary += `- **Trivy**: ${trivyCount} vulnerabilities found\n`;
          } catch (e) {
            securitySummary += '- **Trivy**: Failed to parse results\n';
          }
          
          try {
            // Parse Bandit results
            const banditResults = JSON.parse(fs.readFileSync('bandit-results.json', 'utf8'));
            const banditCount = banditResults.results ? banditResults.results.length : 0;
            securitySummary += `- **Bandit**: ${banditCount} security issues found\n`;
          } catch (e) {
            securitySummary += '- **Bandit**: Failed to parse results\n';
          }
          
          securitySummary += '\nðŸ“Š **Security Score**: ';
          
          // Calculate security score
          let totalIssues = 0;
          try {
            const semgrepResults = JSON.parse(fs.readFileSync('semgrep-results.json', 'utf8'));
            totalIssues += semgrepResults.results ? semgrepResults.results.length : 0;
          } catch (e) {}
          
          try {
            const banditResults = JSON.parse(fs.readFileSync('bandit-results.json', 'utf8'));
            totalIssues += banditResults.results ? banditResults.results.length : 0;
          } catch (e) {}
          
          let securityScore = Math.max(0, 100 - (totalIssues * 5));
          if (securityScore >= 90) {
            securitySummary += `ðŸŸ¢ ${securityScore}/100 (Excellent)\n`;
          } else if (securityScore >= 70) {
            securitySummary += `ðŸŸ¡ ${securityScore}/100 (Good)\n`;
          } else {
            securitySummary += `ðŸ”´ ${securityScore}/100 (Needs Attention)\n`;
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: securitySummary
          });
    
    - name: Create Security Issue (if critical issues found)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Critical Security Issues Detected',
            body: `Critical security issues were detected in the latest scan.
            
            Please review the security scan results and address the issues immediately.
            
            **Scan Details:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref }}
            - Timestamp: ${new Date().toISOString()}
            
            **Next Steps:**
            1. Review the security scan artifacts
            2. Address critical and high severity issues
            3. Re-run the security scan to verify fixes`,
            labels: ['security', 'critical', 'bug']
          });

  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r security/requirements.txt
        pip install -r frontend/requirements.txt
    
    - name: Run Safety (Python dependencies)
      run: |
        pip install safety
        safety check --json --output safety-results.json
        safety check
    
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-results.json
        pip-audit
    
    - name: Upload Dependency Scan Results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          safety-results.json
          pip-audit-results.json

  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r compliance/requirements.txt
    
    - name: Run VAT Compliance Check
      run: |
        python compliance/vat_oss_automation.py --check-compliance
      env:
        TAX_ADMIN_API_KEY: ${{ secrets.TAX_ADMIN_API_KEY }}
    
    - name: Run GDPR Compliance Check
      run: |
        python compliance/gdpr_compliance.py --check-compliance
    
    - name: Upload Compliance Results
      uses: actions/upload-artifact@v3
      with:
        name: compliance-check-results
        path: |
          compliance-results.json
          gdpr-compliance-report.json
