"""Database models and Pydantic schemas for FinanceAgent."""

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional
from uuid import uuid4

from pydantic import BaseModel, Field
from sqlalchemy import (
    Boolean,
    Column,
    DateTime,
    Float,
    Integer,
    JSON,
    String,
    Text,
    Enum as SQLEnum,
)
from sqlalchemy.dialects.postgresql import UUID as PG_UUID
from sqlalchemy.sql import func

from shared_core.utils.db import Base


class DecisionType(str, Enum):
    """Types of decisions the agent can make."""
    
    SPENDING_ALERT = "spending_alert"
    TAX_OPTIMIZATION = "tax_optimization"
    CASHFLOW_WARNING = "cashflow_warning"
    PATTERN_DETECTION = "pattern_detection"
    SAVINGS_RECOMMENDATION = "savings_recommendation"
    RISK_ASSESSMENT = "risk_assessment"


class FeedbackType(str, Enum):
    """User feedback types."""
    
    POSITIVE = "positive"
    NEGATIVE = "negative"
    NEUTRAL = "neutral"
    CORRECTED = "corrected"


# Database Models
class AgentDecision(Base):
    """Stores agent decisions and insights."""
    __tablename__ = "agent_decisions"
    
    id = Column(PG_UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(String(64), index=True, nullable=False)
    user_id = Column(String(64), index=True, nullable=True)
    
    # Decision metadata
    decision_type = Column(String(64), nullable=False, index=True)
    confidence = Column(Float, nullable=False, default=0.0)
    context_data = Column(JSON, nullable=True)
    
    # Decision content
    title = Column(String(255), nullable=False)
    summary = Column(Text, nullable=True)
    recommendation = Column(Text, nullable=True)
    action_items = Column(JSON, nullable=True)
    
    # Status
    acknowledged = Column(Boolean, default=False)
    dismissed = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)
    acknowledged_at = Column(DateTime(timezone=True), nullable=True)
    
    # Feedback
    user_feedback = Column(String(32), nullable=True)
    feedback_note = Column(Text, nullable=True)


class AgentMemory(Base):
    """Stores embeddings and context for agent memory."""
    __tablename__ = "agent_memory"
    
    id = Column(PG_UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(String(64), index=True, nullable=False)
    user_id = Column(String(64), index=True, nullable=True)
    
    # Embedding data
    embedding_id = Column(String(255), nullable=True, index=True)  # Pinecone ID
    embedding_vector = Column(JSON, nullable=True)  # Store for backup
    
    # Context
    content_type = Column(String(64), nullable=False)  # receipt, transaction, decision
    content_id = Column(String(255), nullable=True, index=True)
    content_text = Column(Text, nullable=False)  # Text used for embedding
    
    # Metadata
    metadata = Column(JSON, nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)


class AgentFeedback(Base):
    """Stores user feedback for learning."""
    __tablename__ = "agent_feedback"
    
    id = Column(PG_UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(String(64), index=True, nullable=False)
    decision_id = Column(PG_UUID(as_uuid=True), nullable=False, index=True)
    
    # Feedback
    feedback_type = Column(String(32), nullable=False)
    rating = Column(Integer, nullable=True)  # 1-5
    comment = Column(Text, nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())


# Pydantic Models (API)
class AgentDecisionResponse(BaseModel):
    """API response for agent decisions."""
    
    id: str
    decision_type: str
    title: str
    summary: Optional[str] = None
    recommendation: Optional[str] = None
    action_items: Optional[list[str]] = None
    confidence: float
    created_at: datetime
    acknowledged: bool


class AgentInsight(BaseModel):
    """Financial insight generated by agent."""
    
    category: str
    insight_type: str  # spending_pattern, anomaly, trend, prediction
    message: str
    severity: str  # info, warning, critical
    metadata: Optional[dict[str, Any]] = None


class FinancialPattern(BaseModel):
    """Detected financial pattern."""
    
    pattern_type: str  # recurring_payment, seasonal, anomaly
    description: str
    confidence: float
    examples: list[dict[str, Any]]
    recommendation: Optional[str] = None


class SpendingAlert(BaseModel):
    """Spending alert from agent."""
    
    category: str
    current_amount: float
    previous_amount: Optional[float] = None
    change_percent: Optional[float] = None
    threshold_exceeded: bool
    message: str
    recommendation: Optional[str] = None


class AgentFeedbackRequest(BaseModel):
    """Request model for user feedback."""
    
    decision_id: str
    feedback_type: FeedbackType
    rating: Optional[int] = Field(None, ge=1, le=5)
    comment: Optional[str] = None


class AgentContextRequest(BaseModel):
    """Request model for agent analysis."""
    
    tenant_id: str
    user_id: Optional[str] = None
    include_receipts: bool = True
    include_transactions: bool = True
    days_back: int = 30
    categories: Optional[list[str]] = None

