# üê≥ Modulaarinen Docker Compose - Converto Business OS
version: '3.8'

services:
  # üóÑÔ∏è Tietokanta
  postgres:
    image: postgres:15-alpine
    container_name: converto-postgres
    environment:
      POSTGRES_DB: converto
      POSTGRES_USER: converto
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-converto123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U converto"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üî¥ Redis
  redis:
    image: redis:7-alpine
    container_name: converto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üåê Marketing App (converto.fi)
  marketing:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.marketing
    container_name: converto-marketing
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # üìä Dashboard (Asiakkaan hallintapaneeli)
  dashboard:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.dashboard
    container_name: converto-dashboard
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3001
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ‚öôÔ∏è Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    container_name: converto-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://converto:${POSTGRES_PASSWORD:-converto123}@postgres:5432/converto
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - POSTHOG_API_KEY=${POSTHOG_API_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # üõ†Ô∏è Dev Panel (Kehitt√§jien ty√∂kalut)
  dev-panel:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.dev-panel
    container_name: converto-dev-panel
    ports:
      - "3002:80"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3002
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîß Database Migration Tool
  migrate:
    build:
      context: ./backend
      dockerfile: ./Dockerfile.migrate
    container_name: converto-migrate
    environment:
      - DATABASE_URL=postgresql://converto:${POSTGRES_PASSWORD:-converto123}@postgres:5432/converto
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    restart: "no"

  # üìä Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: converto-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./shared/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # üìà Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: converto-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./shared/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./shared/monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # üîç Logging - Loki
  loki:
    image: grafana/loki:latest
    container_name: converto-loki
    ports:
      - "3100:3100"
    volumes:
      - ./shared/monitoring/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml

  # üìù Logging - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: converto-promtail
    volumes:
      - ./shared/monitoring/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  default:
    name: converto-network
    driver: bridge
