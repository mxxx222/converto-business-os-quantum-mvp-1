#!/bin/bash

# üê≥ Modulaarinen Docker Management Script - Converto Business OS
# K√§ytt√∂: ./scripts/modular-docker.sh [command] [module]

set -e

# V√§rit
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funktiot
print_header() {
    echo -e "${BLUE}üê≥ Converto Business OS - Modulaarinen Docker Management${NC}"
    echo "=================================================="
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Tarkista Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker ei ole asennettuna!"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose ei ole asennettuna!"
        exit 1
    fi
}

# N√§yt√§ k√§ytt√∂ohje
show_help() {
    echo "K√§ytt√∂: $0 [command] [module]"
    echo ""
    echo "Komennot:"
    echo "  build [module]     - Rakenna moduuli"
    echo "  start [module]     - K√§ynnist√§ moduuli"
    echo "  stop [module]      - Pys√§yt√§ moduuli"
    echo "  restart [module]   - K√§ynnist√§ moduuli uudelleen"
    echo "  logs [module]      - N√§yt√§ logit"
    echo "  status            - N√§yt√§ tilanne"
    echo "  clean             - Puhdista Docker-resurssit"
    echo "  dev               - K√§ynnist√§ kehitysymp√§rist√∂"
    echo "  prod              - K√§ynnist√§ tuotantoymp√§rist√∂"
    echo ""
    echo "Moduulit:"
    echo "  marketing         - Marketing App (converto.fi)"
    echo "  dashboard         - Dashboard (asiakkaan hallintapaneeli)"
    echo "  backend           - Backend API"
    echo "  dev-panel         - Dev Panel (kehitt√§jien ty√∂kalut)"
    echo "  all               - Kaikki moduulit"
    echo ""
    echo "Esimerkkej√§:"
    echo "  $0 build marketing"
    echo "  $0 start all"
    echo "  $0 logs backend"
    echo "  $0 dev"
}

# Rakenna moduuli
build_module() {
    local module=$1

    print_info "Rakennetaan moduuli: $module"

    case $module in
        "marketing")
            docker-compose -f docker-compose.modular.yml build marketing
            ;;
        "dashboard")
            docker-compose -f docker-compose.modular.yml build dashboard
            ;;
        "backend")
            docker-compose -f docker-compose.modular.yml build backend
            ;;
        "dev-panel")
            docker-compose -f docker-compose.modular.yml build dev-panel
            ;;
        "all")
            docker-compose -f docker-compose.modular.yml build
            ;;
        *)
            print_error "Tuntematon moduuli: $module"
            exit 1
            ;;
    esac

    print_success "Moduuli $module rakennettu onnistuneesti!"
}

# K√§ynnist√§ moduuli
start_module() {
    local module=$1

    print_info "K√§ynnistet√§√§n moduuli: $module"

    case $module in
        "marketing")
            docker-compose -f docker-compose.modular.yml up -d marketing
            ;;
        "dashboard")
            docker-compose -f docker-compose.modular.yml up -d dashboard
            ;;
        "backend")
            docker-compose -f docker-compose.modular.yml up -d backend
            ;;
        "dev-panel")
            docker-compose -f docker-compose.modular.yml up -d dev-panel
            ;;
        "all")
            docker-compose -f docker-compose.modular.yml up -d
            ;;
        *)
            print_error "Tuntematon moduuli: $module"
            exit 1
            ;;
    esac

    print_success "Moduuli $module k√§ynnistetty onnistuneesti!"
}

# Pys√§yt√§ moduuli
stop_module() {
    local module=$1

    print_info "Pys√§ytet√§√§n moduuli: $module"

    case $module in
        "marketing")
            docker-compose -f docker-compose.modular.yml stop marketing
            ;;
        "dashboard")
            docker-compose -f docker-compose.modular.yml stop dashboard
            ;;
        "backend")
            docker-compose -f docker-compose.modular.yml stop backend
            ;;
        "dev-panel")
            docker-compose -f docker-compose.modular.yml stop dev-panel
            ;;
        "all")
            docker-compose -f docker-compose.modular.yml stop
            ;;
        *)
            print_error "Tuntematon moduuli: $module"
            exit 1
            ;;
    esac

    print_success "Moduuli $module pys√§ytetty onnistuneesti!"
}

# K√§ynnist√§ moduuli uudelleen
restart_module() {
    local module=$1

    print_info "K√§ynnistet√§√§n moduuli uudelleen: $module"

    case $module in
        "marketing")
            docker-compose -f docker-compose.modular.yml restart marketing
            ;;
        "dashboard")
            docker-compose -f docker-compose.modular.yml restart dashboard
            ;;
        "backend")
            docker-compose -f docker-compose.modular.yml restart backend
            ;;
        "dev-panel")
            docker-compose -f docker-compose.modular.yml restart dev-panel
            ;;
        "all")
            docker-compose -f docker-compose.modular.yml restart
            ;;
        *)
            print_error "Tuntematon moduuli: $module"
            exit 1
            ;;
    esac

    print_success "Moduuli $module k√§ynnistetty uudelleen onnistuneesti!"
}

# N√§yt√§ logit
show_logs() {
    local module=$1

    print_info "N√§ytet√§√§n logit moduulille: $module"

    case $module in
        "marketing")
            docker-compose -f docker-compose.modular.yml logs -f marketing
            ;;
        "dashboard")
            docker-compose -f docker-compose.modular.yml logs -f dashboard
            ;;
        "backend")
            docker-compose -f docker-compose.modular.yml logs -f backend
            ;;
        "dev-panel")
            docker-compose -f docker-compose.modular.yml logs -f dev-panel
            ;;
        "all")
            docker-compose -f docker-compose.modular.yml logs -f
            ;;
        *)
            print_error "Tuntematon moduuli: $module"
            exit 1
            ;;
    esac
}

# N√§yt√§ tilanne
show_status() {
    print_info "Docker-konttien tilanne:"
    echo ""
    docker-compose -f docker-compose.modular.yml ps
    echo ""

    print_info "Palvelut:"
    echo "üåê Marketing:    http://localhost:3000"
    echo "üìä Dashboard:   http://localhost:3001"
    echo "‚öôÔ∏è  Backend:     http://localhost:8000"
    echo "üõ†Ô∏è  Dev Panel:   http://localhost:3002"
    echo "üìä Prometheus:  http://localhost:9090"
    echo "üìà Grafana:     http://localhost:3003"
}

# Puhdista Docker-resurssit
clean_docker() {
    print_warning "Puhdistetaan Docker-resurssit..."

    # Pys√§yt√§ kaikki kontit
    docker-compose -f docker-compose.modular.yml down

    # Poista k√§ytt√§m√§tt√∂m√§t kuvat
    docker image prune -f

    # Poista k√§ytt√§m√§tt√∂m√§t volyymit
    docker volume prune -f

    print_success "Docker-resurssit puhdistettu!"
}

# K√§ynnist√§ kehitysymp√§rist√∂
start_dev() {
    print_info "K√§ynnistet√§√§n kehitysymp√§rist√∂..."

    # Kopioi environment-tiedosto jos ei ole olemassa
    if [ ! -f .env ]; then
        cp .env.example .env
        print_warning "Luotu .env-tiedosto .env.example:sta. Muokkaa tarvittaessa."
    fi

    # K√§ynnist√§ kaikki palvelut
    docker-compose -f docker-compose.modular.yml up -d

    print_success "Kehitysymp√§rist√∂ k√§ynnistetty!"
    echo ""
    show_status
}

# K√§ynnist√§ tuotantoymp√§rist√∂
start_prod() {
    print_info "K√§ynnistet√§√§n tuotantoymp√§rist√∂..."

    # Tarkista environment-tiedosto
    if [ ! -f .env ]; then
        print_error ".env-tiedosto puuttuu! Luo se .env.example:sta."
        exit 1
    fi

    # K√§ynnist√§ kaikki palvelut
    docker-compose -f docker-compose.modular.yml up -d

    print_success "Tuotantoymp√§rist√∂ k√§ynnistetty!"
    echo ""
    show_status
}

# P√§√§funktio
main() {
    print_header

    # Tarkista Docker
    check_docker

    # K√§sittele komennot
    case $1 in
        "build")
            if [ -z "$2" ]; then
                print_error "Anna moduuli!"
                show_help
                exit 1
            fi
            build_module $2
            ;;
        "start")
            if [ -z "$2" ]; then
                print_error "Anna moduuli!"
                show_help
                exit 1
            fi
            start_module $2
            ;;
        "stop")
            if [ -z "$2" ]; then
                print_error "Anna moduuli!"
                show_help
                exit 1
            fi
            stop_module $2
            ;;
        "restart")
            if [ -z "$2" ]; then
                print_error "Anna moduuli!"
                show_help
                exit 1
            fi
            restart_module $2
            ;;
        "logs")
            if [ -z "$2" ]; then
                print_error "Anna moduuli!"
                show_help
                exit 1
            fi
            show_logs $2
            ;;
        "status")
            show_status
            ;;
        "clean")
            clean_docker
            ;;
        "dev")
            start_dev
            ;;
        "prod")
            start_prod
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Tuntematon komento: $1"
            show_help
            exit 1
            ;;
    esac
}

# Suorita p√§√§funktio
main "$@"
